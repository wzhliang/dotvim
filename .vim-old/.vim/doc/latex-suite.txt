                              Latex-Suite Reference
                                *latex-suite.txt*
                 Srinath Avadhanula <srinath AT fastmail DOT fm>
                    Mikolaj Machowski <mikmach AT wp DOT pl>
                                        


                                    Abstract
                                    ========
Latex-Suite attempts to provide a comprehensive set of tools to view, edit and
compile LaTeX documents in Vim. Together, they provide tools starting from
macros to speed up editing LaTeX documents to functions for forward searching
.dvi documents. Latex-suite has been possible because of the contributions of
many people. Please see latex-suite-credits [|latex-suite-credits|] for a list
of people who have helped.

Latex-suite is released under the Vim charityware license. For license and
conditions of use look at |copyright|. Replace all occurences of ``Vim'' with
``Latex-Suite''. The current copyright holders of Latex-Suite are Srinath
Avadhanula and Mikolaj Machowski.

Homepage: http://vim-latex.sourceforge.net


                                                           *latex-suite.txt-toc*
|ls_1| Recommended Settings
|ls_2| Inserting Templates
|ls_3| Latex-Suite Macros
    |ls_3_1| Insert-mode Environment Mappings
    |ls_3_2| Visual-mode Environment Mappings
    |ls_3_3| Font Mappings
    |ls_3_4| Section Mappings
    |ls_3_5| Greek Letter Mappings
    |ls_3_6| Auc-Tex Key Bindings
    |ls_3_7| Diacritics
    |ls_3_8| BibTeX Shortcuts
    |ls_3_9| Smart Key Mappings
    |ls_3_10| Alt Key Macros
    |ls_3_11| Custom Macros
|ls_4| Package Handling
    |ls_4_1| Inserting package commands
    |ls_4_2| Actions taken for supported packages
    |ls_4_3| Automatic Package detection
    |ls_4_4| Writing supporting for a package
|ls_5| Latex Completion
    |ls_5_1| Latex-Suite \cite completion
|ls_6| Compiling LaTeX files via Latex-Suite
    |ls_6_1| Setting Compilation rules.
    |ls_6_2| Specifying which file to compile
    |ls_6_3| Customizing the compiler output
    |ls_6_4| Compiling parts of a file
|ls_7| Latex Viewing and Searching
    |ls_7_1| Forward Searching DVI documents
    |ls_7_2| Inverse Searching
|ls_8| Latex Folding
    |ls_8_1| Default Folding Scheme in Latex-Suite
    |ls_8_2| Customizing what to fold
|ls_9| Latex-Suite Commands and Maps
    |ls_9_1| Latex-Suite Maps
    |ls_9_2| Latex Suite Commands
|ls_10| Customizing Latex-Suite
    |ls_10_1| Place-Holder Customization
    |ls_10_2| Macro Customization
    |ls_10_3| Smart Key Customization
    |ls_10_4| Latex Completion Customization
    |ls_10_5| Compiler Customization
    |ls_10_6| Viewer Customization
    |ls_10_7| Menu Customization
    |ls_10_8| Folding Customization
    |ls_10_9| Package Handling Customization
|ls_11| Credits

================================================================================
Recommended Settings                                      *ls_1*
                                                          *recommended-settings*



Latex-Suite works best if you have the following settings in your ~/.vimrc: >
    " this line is responsible for loading latex-suite when a .tex file is
    " opened.
    filetype plugin on
    " for automatic indentation specific to LaTeX.
    filetype indent on


In addition, the following settings could go in your ~/.vim/ftplugin/tex.vim
file: >
    " this is mostly a matter of taste. but LaTeX looks good with just a bit
    " of indentation.
    set sw=2
    " TIP: if you write your \label's as \label{fig:something}, then if you
    " type in \ref{fig: and press <C-n> you will automatically cycle through
    " all the figure labels. Very useful!
    set iskeyword+=:
    " IMPORTANT: If you are a win32 user, then the following setting is
    " necessary in order to have latex called correctly from within Vim.
    set shellslash


================================================================================
Inserting Templates                                      *ls_2*
                                                         *latex-suite-templates*



This functionality is available via the TeX-Suite > Templates menu. This module
provides a way to insert custom templates at the beginning of the current file.

When latex-suite first starts up, it scans the
$VIM/ftplugin/latex-suite/templates/ directory and creates menu items based on
the files found there. When you select a template from this menu, the file will
be read in above the first line of the current file.

A template file can utlilize placeholders for initializing the cursor position
when the template is read in and subsequent movement. In addition, template
files can contain dynamic elements such as the time of creation of a file etc,
by using vim expressions.

You can place your own templates in the $VIM/ftplugin/latex-suite/templates/
directory in order for them to be available via the menu. Unless Latex-Suite
releases a template with the same name, these files should not get over-written
when you install a new release over an existing one.

NOTE: Templates are also accessible for non-gui users with the command
      |:TTemplate|. The argument should be name of the corresponding template
      file. If the command is called without arguments (preferred usage), then a
      list of available templates is displayed and the user is asked to choose
      one of them.
      
      

================================================================================
Latex-Suite Macros                                                *ls_3*
                                                                  *latex-macros*

|ls_3_1| Insert-mode Environment Mappings
|ls_3_2| Visual-mode Environment Mappings
|ls_3_3| Font Mappings
|ls_3_4| Section Mappings
|ls_3_5| Greek Letter Mappings
|ls_3_6| Auc-Tex Key Bindings
|ls_3_7| Diacritics
|ls_3_8| BibTeX Shortcuts
|ls_3_9| Smart Key Mappings
|ls_3_10| Alt Key Macros
|ls_3_11| Custom Macros


Latex-Suite ships with a very comprehensive set of insert mode and |visual-mode|
mappings and menu items to typeset most of the LaTeX elements.

NOTE: These mappings are are not standard mappings in the sense that only the
      last character is mapped. See plugin/imaps.vim for further documentation.
      For example, in the case of the mapping EFI provided by Latex-Suite you
      can press the characters 'E', 'F' and 'I' as slowly as you wish (unlike
      the normal imap command where timeout issues are involved). The characters
      are visible as you type them (unlike normal imaps) and you can use the
      movement or backspace key to correct yourself unlike normal mappings.
      
      
NOTE: Place Holders
      -------------
      Almost all macros provided in Latex-Suite implement Stephen Riem's
      bracketing system and Gergely Kontra's JumpFunc() for handling
      place-holders. This consists of using "place-holders" to mark off
      locations where the next relevant editing has to be done. As an example,
      when you type EFI in |insert-mode|, you will get the following: >
          \begin{figure}[h]
              \centerline{\psfig{figure=<+eps file+>}}
              \caption{<+caption text+>}
              \label{fig:<+label+>}
          \end{figure}<++>
<     The text <+eps file+> will be selected and you will be left in
      |select-mode| so that you can continue typing straight away. After having
      typed in the file name, you can press <Ctrl-J> (while still in
      insert-mode). This will take you directly to the next "place-holder". i.e,
      <+caption text+> will be visually selected with Vim in select mode again
      for typing in the caption. This saves on a lot of key presses.
      
      
The following sections describe the various editing macros provided by
Latex-Suite.


--------------------------------------------------------------------------------
Insert-mode Environment Mappings              *ls_3_1*
                                              *insert-mode-environment-mappings*
|ls_3_1_1| Method 1
|ls_3_1_2| Method 2
|ls_3_1_3| Method 3
|ls_3_1_4| Method 4

These mappings insert LaTeX "environments" such as: >
    \begin{center}
        <++>
    \end{center}<++>
with the cursor left at the first |placeholder|. There are various ways of
inserting environments into the source file. If the environment is a standard
latex environment, then latex suite might also include common fields associated
with it.



Method 1                                                            *ls_3_1_1*
                                                                    *ls-imap-f5*

If you press <F5> in the insert mode while on an empty line, latex-suite prompts
you with a list of environments you might want to insert. You can either choose
one from the list or type in a new environment name. This list can be customized
via the g:Tex_PromptedEnvironments [|Tex_PromptedEnvironments|] setting.

In addition to the Tex_PromptedEnvironments variable, Latex-Suite also lists
envionments found in custom packages as described in the section Package
actions. [|package-actions|]


Method 2                                                              *ls_3_1_2*

If you press <F5> while on a line containing a single word, then latex-suite
creates a environment of that name.


Method 3                                                              *ls_3_1_3*

The shifted function keys, <S-F1> to <S-F4>can also be optionally mapped to some
common environments which you insert most often. The environments mapped to each
key can also be customized via the g:Tex_HotKeyMappings [|Tex_HotKeyMappings|]
setting.


Method 4                                                              *ls_3_1_4*

Environments can also be inserted by pressing a 3 capital letter sequence
starting with an E. The following subsection describes this in detail. The
sequence of 3 letters generally tries to follow the following rules:


1. All environment mappings begin with E

2. If the environment can be broken up into 2 distinct words, such as flushright
   (flush + right), then the next 2 letters are the first letters of the 2
   words. Example: >
       flushleft  (_f_lush + _l_eft)  ---> EFL
       flushright (_f_lush + _r_ight) ---> EFR
       eqnarray   (_e_qn + _a_rray)   ---> EEA
<  If on the other hand, the environment name cannot be broken up into 2
   distinct words, then the next 2 letters are the first 2 letters of the name
   of the environment. Example: >
       equation (_eq_uation)          ---> EEQ

Unfortunately there are some environments that cannot be split in two words and
first two letters in name are identical. In this case shortcut is created from
E, first and last letter. Example: >
    quote     (_q_uot_e_)          ---> EQE
    quotation (_q_uotatio_n_)      ---> EQN
Of course, not every last one of the environments can follow this rule because
of ambiguities. In case of doubt, pull down the Tex-Environments menu. The menu
item should give the hint for the map.

--------------------------------------------------------------------------------
Visual-mode Environment Mappings               *ls_3_2*
                                               *visual-mode-environment-mapings*

Latex-Suite provides visual-mode mappings which enclose visually selected
portions of text in environments. These mappings are derived from the
corresponding insert-mode environment mappings according to the following simple
rule: >
    ECE           --> ,ce
The rule simply says that the leading E is converted to , and the next 2 letters
are small case.

Here ECE is the insert-mode map which inserts the \begin{center} ...
\end{center} environment. Correspondingly, if you select a portion of text
visually and press ,ce while still in visual mode, then the selected portion
will be enclosed in \begin{center} ... \end{center}.

Some of the visual mode mappings are sensitive to whether you choose line-wise
or character-wise. For example, if you choose a word and press ,ce, then you get
\centerline{word}, whereas if you press ,ce on a line-wise selection, you get: >
    \begin{center}
        line
    \end{center}


--------------------------------------------------------------------------------
Font Mappings                                               *ls_3_3* *font-maps*

These mappings insert font descriptions such as: \textsf{<++>}<++> with the
cursor left in place of the first placeholder [|place-holders|] (the <++>
characters).

Mnemonic:
1. first letter is always F (F for font)

2. next 2 letters are the 2 letters describing the font.

Example: Typing FEM in insert-mode expands to \textem{<++>}<++>.

Just like environment mappings, you can visually select an area and press `sf to
have it enclosed in: \textsf{word} or >
    {\sffamily
    line
    }
depending on character-wise or line-wise selection.

--------------------------------------------------------------------------------
Section Mappings                                              *ls_3_4*
                                                              *section-mappings*

These maps insert LaTeX sections such as: >
    \section{<++>}<++>
etc. Just as in the case of environments and fonts, can be enclosed with a
visual selection. The enclosing is not sensetive to character or line-wise
selection.

Mnemonic: (make your own!) >
    SPA for part
    SCH for chapter
    SSE for section
    SSS for subsection
    SS2 for subsubsection
    SPG for paragraph
    SSP for subparagraph


Example: SSE in insert mode inserts >
    \section{<++>}<++>
<   If you select a word or line and press ,se, then you get >
    \section{section name}
The menu item in Tex-Environments.Sections have a sub-menu called 'Advanced'.
Choosing an item from this sub-menu asks a couple of questions (whether you want
to include the section in the table of contents, whether there is a shorter name
for the table of contents) and then creates a more intelligent template.

--------------------------------------------------------------------------------
Greek Letter Mappings                                    *ls_3_5*
                                                         *greek-letter-mappings*

Lower case

`a through `z expand to \alpha through \zeta.Upper case:

 >
    `D = \Delta
    `F = \Phi
    `G = \Gamma
    `Q = \Theta
    `L = \Lambda
    `X = \Xi
    `Y = \Psi
    `S = \Sigma
    `U = \Upsilon
    `W = \Omega
<     NOTE: LaTeX does not support upper case for all greek alphabets.
      
      
Just like other Latex-Suite mappings, these mappings are not created using the
standard imap command. Thus you can type slowly, correct using <BS> etc.

--------------------------------------------------------------------------------
Auc-Tex Key Bindings                                          *ls_3_6*
                                                              *auc-tex-mappings*

These are simple 2 key expansions for some very commonly used LaTeX elements:

 >
    `^   Expands To   \Hat{<++>}<++>
    `_   expands to   \bar{<++>}<++>
    `6   expands to   \partial
    `8   expands to   \infty
    `/   expands to   \frac{<++>}{<++>}<++>
    `%   expands to   \frac{<++>}{<++>}<++>
    `@   expands to   \circ
    `0   expands to   ^\circ
    `=   expands to   \equiv
    `\   expands to   \setminus
    `.   expands to   \cdot
    `*   expands to   \times
    `&   expands to   \wedge
    `-   expands to   \bigcap
    `+   expands to   \bigcup
    `(   expands to   \subset
    `)   expands to   \supset
    `<   expands to   \le
    `>   expands to   \ge
    `,   expands to   \nonumber
    `~   expands to   \tilde{<++>}<++>
    `;   expands to   \dot{<++>}<++>
    `:   expands to   \ddot{<++>}<++>
    `2   expands to   \sqrt{<++>}<++>
    `|   expands to   \Big|
    `I   expands to   \int_{<++>}^{<++>}<++>
(again, notice the convenient place-holders)

In addition the visual mode macros are provided:

 >
    `(  encloses selection in \left( and \right)
    `[  encloses selection in \left[ and \right]
    `{  encloses selection in \left\{ and \right\}
    `$  encloses selection in $$ or \[ \] depending on characterwise or
                                          linewise selection


--------------------------------------------------------------------------------
Diacritics                                                  *ls_3_7*
                                                            *diacritic-mappings*

These mappings speed up typing European languages which contain diacritic
characters such as a-umlaut etc. >
    +<l>     expands to \v{<l>}
    =<l>     expands to \'{<l>}
< where <l> is an alphabet.
  >
    +}       expands to \"{a}
    +:       expands to \^{o}
Latex-Suite also ships with smart backspacing [|smart-backspace|] functionality
which provides another convinience while editing languages with diactritics.

NOTE: Diacritics are disabled by default in Latex-Suite because they can
      sometimes be a little too intrusive. Moreover, most European users can
      nowadays use font encodings which display diacritic characters directly
      instead of having to rely on Latex-Suite's method of displaying
      diacritics.
      
      Set the g:Tex_Diacritics [|Tex_Diacritics|] variable to enable diacritics.
      
      

--------------------------------------------------------------------------------
BibTeX Shortcuts                                               *ls_3_8*
                                                               *bibtex-bindings*
|ls_3_8_1| Customizing Bib-TeX fields

Latex-Suite provides an easy way of entering bibliographic entries. Four
insert-mode mappings: BBB, BBL, BBH and BBX are provided, all of which
essentially act in the same manner. When you type any of these in insert-mode,
you will get a prompt asking you to choose a entry type for the bibliographic
entry.

When you choose an entry type, a bibliographic entry template will be inserted.
For example, if you choose the option 'book' via the map BBB, then the following
template will be inserted: >
    @BOOK{<+key+>,
    author = {<++>},
    editor = {<++>},
    title = {<++>},
    publisher = {<++>},
    year = {<++>},
    otherinfo = {<++>}
    }<++>


<+key+> will be highlighted in select-mode and you can type in the bib-key.
After that you can use <Ctrl-J> to navigate to successive locations in the
template and enter new values.

BBB inserts a template with only the fields mandatorily required for a given
entry type. BBL inserts a template with commony used extra options. BBH inserts
a template with more options which are not as commonly used. BBX inserts a
template with all the fields which the entry type supports.

NOTE: Mnemonic
      --------
      B for Bibliographic entry, L for Large entry, H for Huge entry, and X
      stands for all eXtras.
      
      


Customizing Bib-TeX fields                                  *ls_3_8_1*
                                                            *adding-bib-options*

If you wish the BBB command to insert a few additional fields in addition to the
fields it creates, then you will need to define global variables of the form >
    g:Bib_{type}_options
in you $VIM/ftplugin/bib.vim file, where {option} is a string like 'article',
'book' etc. This variable should contain one of the letters defined in the
following table

Character    Field Type~
w            address
a            author
b            booktitle
c            chapter
d            edition
e            editor
h            howpublished
i            institution
k            isbn
j            journal
m            month
z            note
n            number
o            organization
p            pages
q            publisher
r            school
s            series
t            title
u            type
v            volume
y            year

For example, by default, choosing 'article' via BBB inserts the following
template by default >
    @ARTICLE{<+key+>,
    author = {<++>},
    title = {<++>},
    journal = {<++>},
    year = {<++>},
    otherinfo = {<++>}
    }<++>
However, if g:Bib_article_options is defined as 'mnp', then 'article' will
insert the following template >
    @ARTICLE{<+key+>,
    author = {<++>},
    title = {<++>},
    journal = {<++>},
    year = {<++>},
    month = {<++>},
    number = {<++>},
    pages = {<++>},
    otherinfo = {<++>}
    }<++>


--------------------------------------------------------------------------------
Smart Key Mappings                                                  *ls_3_9*
                                                                    *smart-keys*

Latex-Suite ships with the following smart keys:

Smart Backspace
---------------
                                                               *smart-backspace*
Pressing <BS> in insert mode checks to see whether we are just after something
like \'{a} and if so, deletes all of it. i.e, diacritics are treated as single
characters for backspacing.

Smart Quotes
------------
Pressing " (english double quote) will insert `` or '' by making an intelligent
guess about whether we intended to open or close a quote.

Smart Space
-----------
Latex-suite maps the <space> key in such a way that $ characters are not broken
across lines. It does this by first setting tw=0 so that Vim will not
automatically break lines and then maps the <space> key to insert newlines
keeping $$'s on the same line.

Smart Dots
----------
Pressing ... (3 dots) results in \ldots outside math mode and \cdots in math
mode.

--------------------------------------------------------------------------------
Alt Key Macros                                               *ls_3_10*
                                                             *bracketing-macros*
|ls_3_10_1| <Alt-L>
|ls_3_10_2| <Alt-M>
|ls_3_10_3| <Alt-C>

Latex-Suite utilizes a set of macros originally created by Carl Mueller in
auctex.vim to make inserting all the \left ... \right stuff very easy. The
following maps are provided:



<Alt-L>                                                      *ls_3_10_1* *Alt-L*

This is a polymorphic insert-mode mapping which expands to one of the following
depending on the character just before the cursor location.

Character before cursor    Expansion~
(                          \left( <++> \right)
[                          \left[ <++> \right]
|                          \left| <++> \right|
{                          \left\{ <++> \right\}
<                          \langle <++> \rangle
q                          \lefteqn{<++>}<++>

If the character before the cursor is none of the above, then it will simply
insert a \label{<++>}<++>.


<Alt-M>                                                      *ls_3_10_2* *Alt-M*

This insert-mode mapping encloses the previous character in \mathbf{}.


<Alt-C>                                                      *ls_3_10_3* *Alt-C*

In insert mode, this key is polymorphic as follows:


1. If the previous character is a letter or number, then capitalize it and
   enclose it in \mathcal{}.

2. otherwise insert \cite{}.
In visual mode, it will simply enclose the selection in \mathcal{}
NOTE: By default, typing Alt-<key> in Vim takes focus to the menu bar if a menu
      with the hotkey <key> exists. If in your case, there are conflicts due to
      this behavior, you will need to set >
          set winaltkeys=no
<     in your $VIM/ftplugin/tex.vim in order to use these maps.
      
      
NOTE: Customizing the maps
      --------------------
      You can also customize the keys which trigger this functionality by
      remapping certain <Plug> mappings as described in Customizing Alt-key maps
      [|customize-alt-key-maps|].
      
      

--------------------------------------------------------------------------------
Custom Macros                                               *ls_3_11*
                                                            *custom-macros-menu*

This functionality available via the TeX-Suite.Macros menu, provides a way of
inserting customized macros into the current file via the menu.

When latex-suite starts up, it scans the $VIM/ftplugin/latex-suite/macros/
directory and creates a menu from the files found there. Each file is considered
as a single macro. You can place your own macros in this directory, using
placeholders [|place-holders|] if wanted.

When you choose a macro from the menu, the corresponding file is read into the
current buffer after the current cursor position. In non-gui mode, you can use
the |TMacro| command instead of choosing from the menu. This command takes the
macro file name as an argument. When called without arguments (preferred usage),
then a list of avaiable macro files is displayed and the user is prompted to
choose one of them).

There are some other tools provided in this menu, namely:


{New}       Creates a new (unnamed) buffer in the latex-suite/macros/ directory.
            Use the command :TexMacroNew in non-gui mode.
{Edit}      Opens up the corresponding macro file for editing. Use :TexMacroEdit
            in non-gui mode.
{Delete}    Deletes the corresponding macro. Use the prefixed numbers for fast
            navigation of menus. Use :TexMacroDelete in non-gui mode.
{Redraw}    Rescans the macros/ directory and refreshes the macros list.

================================================================================
Package Handling                                                *ls_4*
                                                                *latex-packages*

|ls_4_1| Inserting package commands
|ls_4_2| Actions taken for supported packages
|ls_4_3| Automatic Package detection
|ls_4_4| Writing supporting for a package


Latex-Suite has a lot of functionality written to ease working with packages.
Packages here refers to files which you include into the LaTeX document using
the \usepackage command.


--------------------------------------------------------------------------------
Inserting package commands                                  *ls_4_1*
                                                            *inserting-packages*

When you first invoke Latex-Suite, it scans the
$VIM/ftplugin/latex-suite/packages directory for package script files and
creates a menu from all the files found there. This menu is created under
TeX-Suite > Packages > Supported. This menu contains a list of packages
"supported" by Latex-Suite. When you choose one of the packages from this menu
(for example the amsmath package), then a line of the form >
    \usepackage[<++>]{amsmath}<++>
will be inserted into the current file.

The \usepackage line can also be inserted in an easy manner in the current file
by pressing <F5> while in the preamble of the current document. This will set up
a prompt from the supported packages and ask you to choose from one of them. If
you do not find the package you want to insert in the list, you can type in a
package-name and it will use that. Pressing <F5> in the preamble on a line
containing a single word will construct a \usepackage line from that word.

Once you have inserted a \usepackage line, for supported packages, you can use
the Options and Commands menus described in the next section
[|package-actions|].

--------------------------------------------------------------------------------
Actions taken for supported packages                           *ls_4_2*
                                                               *package-actions*

Once a \usepackage line has been constructed using one of the methods described
in the previous section, if possible, the following sub-menus will be created


TeX-Suite > Packages > <package> Options

TeX-Suite > Packages > <package> Commands
where <package> is the package you just inserted. You can use these menus to
insert commands, environments and options which Latex-Suite recognizes as
belonging to this package.

NOTE: While inserting an option, you need to position yourself in the
      appropritate place in the document, most commonly inside the square braces
      in the \usepackage[]{packname} command. Latex-Suite will not navigate to
      that location.
      
      
In addition to creating these sub-meuns, Latex-Suite will also scan the
$VIM/ftplugin/latex-suite/dictionaries directory and if a dictionary file
corresponding to the package file is found, then it will add the file to the
'dict' setting in Vim so you can use the <C-X><C-K> command to complete words
from that file.

For example, the SIUnits package has a custom dictionary.

If a package detected at startup is found by Latex-Suite in the current
directory or in a location specified by the g:Tex_TEXINPUTS [|Tex_TEXINPUTS|]
variable, Latex-Suite will scan the package for \newenvironment and newcommand
lines and also append any commands and environments found to the list of
commands and environments which you are prompted with when you press <F5>
[|ls-imap-f5|] or <F7> [|ls-imap-f7|] in insert mode.
                                                        *latex-package-scanning*
In addition, the TeX-Suite > Packages menu also contains the following submenus

Update
------
This command is to be invoked with the cursor placed on the package name. If the
corresponding package is found, then a sub-menu with the supported commands and
options is created.

Update All
----------
This function reads the preamble of the document for \usepackage lines and if
Latex-Suite supports the detected packages, then sub-menus containing the
package options and commands are created.


--------------------------------------------------------------------------------
Automatic Package detection                        *ls_4_3*
                                                   *automatic-package-detection*
|ls_4_3_1| Custom Packages

Whenever Latex-Suite begins editing a new LaTeX file, it scans it for
\usepackage{name} lines, and if a supported package is found, then it will
create sub-menus and add to the 'dict' setting as described above.

If a master-file [|latex-master-file|] has been specified, then it will scan
that file instead of the current file. See the section Custom Packages
[|custom-packages|] to see which files Latex-Suite will scan in more detail.

For all the packages detected in this manner, Latex-Suite will take certain
actions as described in the section package support. [|package-actions|].



Custom Packages                                                *ls_4_3_1*
                                                               *custom-packages*

Often times, the preamble can become too long, and some people prefer to put
most of their personalization in a custom package and include that using a
\usepackage line. Latex-Suite tries to search such customs package for other
\usepackage lines, so that supported packages included in this indirect manner
can also be used to create sub-menus, extend the 'dict' setting etc. The most
obvious place to place such custom packages is in the same directory as the
edited file. In addition, LaTeX also supports placing custom packages in places
pointed to by the $TEXINPUTS environment variable.

If you use the $TEXINPUTS variable in LaTeX, and you wish Latex-Suite to search
these custom packages for \usepackage lines, then you need to initialize the
g:Tex_TEXINPUTS [|Tex_TEXINPUTS|] variable.

The g:Tex_TEXINPUTS variable needs to be set in the same format which Vim uses
for the 'path' setting. This format is explained in detail if you do >
    :help file-searching
from within Vim.

Therefore the value of g:Tex_TEXINPUTS will most probably be different from
$TEXINPUTS which your native LaTeX distribution uses.

Example: >
    let g:Tex_TEXINPUTS = '~/texmf/mypackages/**,./**'
The ** indicates that all directories below the directory ~/texmf/mypackages and
./ are to be scanned for custom packages.

NOTE: The present directory '.' is always searched. You need not incude that in
      g:Tex_TEXINPUTS.
      
      

--------------------------------------------------------------------------------
Writing supporting for a package                           *ls_4_4*
                                                           *supporting-packages*
|ls_4_4_1| g:Tex_package_option_<package>
|ls_4_4_2| g:Tex_package_<package>

Supporting a package is easy and consists of writing a vim script with the same
name as the package and placing it in the $VIM/ftplugin/latex-suite/packages
directory. A package script should define two variables as described in the next
two sections.



g:Tex_package_option_<package>                                        *ls_4_4_1*

This setting is a string containing a comma seperated list of options supported
by this package.

Example: >
    g:Tex_pacakge_option_mypack = 'opt1,opt2=,sbr:group1,opt3,opt4'
The = suffix means that the option takes a value. Use sbr:group name to seperate
options into sub-menus. All successive options will be clubbed into the group1
sub-menu till the next sbr: option is encountered.


g:Tex_package_<package>                                               *ls_4_4_2*

 >
    
        g:TeX_package_<package> = "pre:Command,pre:Command1"
    More detailed example is in latex-suite/packages/exmpl file (slightly
    outdated).
    Here is short summary of prefixes which can be used in package files:
    (x - place with cursor, <++> - |placeholder|)
    
    {env:command}  Environment: creates simple environment template
                \begin{command}
                    x
                \end{command}<++>
    {eno:command}  Environment with option:
                \begin[x]{command}
                    <++>
                \end{command}<++>
    {ens:command[<<option>>]...}  Environment special:
                \begin[<<option>>]...{command}
                    <++>
                \end{command}<++>
    {bra:command} Brackets:
                \command{x}<++>
    {brd:command} Brackets double:
                \command{x}{<++>}<++>
    {brs:command[<<option>>]...} Brackets special (as environment special:
                \command[<+x+>]{<++>}{<++>}<++>
    {nor:command} Normal:
                \command<Space
    {noo:command} Normal with option:
                \command[x]<++>
    {nob:command} Normal with option and brackets:
                \command[x]{<++>}<++>
    {pla:command} Plain:
                command<Space
    {spe:command} Special:
                command   <-literal insertion of command
    {sep:command} creates separator. Good for aesthetics and usability :)
    {sbr:command} Breaks menu into submenus. <command> will be title of submenu.
                Can be used also in package variable.
    
    Command can be also given without prefix:. The result is
               \command
              


================================================================================
Latex Completion                                              *ls_5*
                                                              *latex-completion*

|ls_5_1| Latex-Suite \cite completion


This module provides an easy way to insert references to labels and
bibliographic entries.

Consider the situation where you are editing a file with two equations labelled
eqn:euler and eqn:einstein. Now you want to insert a reference to one of these
equations. To do this, you type the \ref{eqn:} command and with the cursor
placed after eqn:, press <F9>. This will bring up two new windows beneath the
main window you were working in as shown in the figure below.

 >
    
          7
          8 These are a couple of equations:
          9 +--  4 lines: eqnarray (eqn:euler) :   e^{j\pi} + 1 &=& 0---------------
         13 +--  4 lines: equation (eqn:einstein) :   E = m c^2---------------------
         17
         18 These are a couple of figures:
         19 +--  7 lines: figure (fig:monkeys) : Monkeys can Type-------------------
         26 +--  7 lines: figure (fig:shakespeare) : Shakespeare could not type-----
         33
         34 This is a reference to \ref{eqn:}<++>
         35
         36
         37 \end{document}
         38
    ~
    ~
    ~
    ~
    ~
    ~
    ~
    newfile.tex                                                   34,32          Bot
    newfile.tex|11| \label{eqn:euler}
    newfile.tex|15| \label{eqn:einstein}
    ~
    ~
    ~
    [Error List]                                                  1,1            All
          7
          8 These are a couple of equations:
          9 \begin{eqnarray}
         10   e^{j\pi} + 1 &=& 0
         11   \label{eqn:euler}
         12 \end{eqnarray}
         13 \begin{equation}
         14   E = m c^2
         15   \label{eqn:einstein}
         16 \end{equation}
    newfile.tex [Preview]                                         11,3           21%
      
The first window (shown as [ErrorList] above) is a |cwindow| containing a list
of possible matches for the reference. The cursor will be located in the first
line of this window. The bottom window is a preview-window showing the context
of the \label. Moving around in the [ErrorList] window automatically scrolls the
preview window so as to always keep showing the context of the \label being
viewed in the [ErrorList] window. You can also press J and K in the [ErrorList]
window to scroll the preview window up and down.

To insert one of the labels, simply position the cursor in the correct line in
the [ErrorList] window and press <enter>. This will immediately close the two
newly opened windows, get back to the correct location in the original file
being edited and insert the label into the \ref command.

If you notice carefully in the example above, the [ErrorList] window only showed
the matches for the equations and did not list any of the figure labels. This is
because we pressed <F9> after \ref{eqn: instead of simply after \ref{. This
caused Latex-Suite to search only for those labels which started with the string
eqn:. If you had pressed <F9> after a \ref{, you would have been shown matches
from all labels, not just those starting with eqn:.

Thus prefixing all your labels with eqn:, fig:, tab: etc. depending on what you
are labelling will lead to an easier time completing references.

The same mechanism also works with citations by pressing <F9> after typing
"\cite{". In the case of citations, Latex-suite automatically displays a list of
bibliographic entries found in various files in the present directory.

This mechanism in fact works with all commands with "ref" or "cite" in them.
Thus you will get completion with \citen, \citenum or \pageref. If you want to
create your own command which uses cite or ref mechanism make sure proper word
is inside it. Example: >
    \newcommand{\pref}[1]{~(p.~\pageref{#1})}


F9> works also with normal words. You can use it as: "Its name is tetr<F9>". Now
Latex-suite will look in all .tex files in directory of edited file word which
is beginning with "tetr". Note: <cr> has here different behavior. It does not
try to complete word but moves you to location chosen in cwindow.

Under MS-Windows you may need to make additional configuration of 'grepgrg'
option. If you have grep program default value "grep -n" doesn't show file names
if there is only one matching file. Place >
    set grepprg=grep\ -Hn
in your _vimrc.

The functionality in this module is also available via three command-line
utilities: |TLook|, |TLookBib| and |TLookAll|.

You can use the g:Tex_ViewerCwindowHeight [|Tex_ViewerCwindowHeight|] and
g:Tex_ViewerPreviewHeight [|Tex_ViewerPreviewHeight|] options in texrc to
configure the heights of the "[Error List]" and preview window.

Latex-suite is distributed with slightly changed explorer.vim. This modification
allows to perform custom operations in explorer buffer.

After \includegraphics{<F9> Latex-suite will open explorer buffer with current
directory or directory defined with g:Tex_ImageDir variable. When you choose
graphic file with <cr> its name will be inserted into file as bib key or label.
If g:Tex_ImageDir is set Latex-suite assume you also defined \graphicspath{}
command and will insert just file name (without extension). If g:Tex_ImageDir is
empty (default) it will put relative path to graphic file.

After \bibliography{<F9> Latex-suite will open explorer buffer with current
directory. After <cr> name of relative path to chosen file (without extension)
will be inserted.

In both cases explorer window will open with basic filter. You should not see
uninteresting in current context files.

You can regulate height of explorer window with g:Tex_ExplorerHeight variable
(default 10).


--------------------------------------------------------------------------------
Latex-Suite \cite completion                             *ls_5_1*
                                                         *latex-completion-cite*
|ls_5_1_1| Caching the \cite completion results

When you press <F9> in insert mode after a \cite{, Latex-Suite will try to
complete it with bibliographic entries.

The following logic is applied to find out which bibliographic entries are
included in the completion.


1. Firstly, if the present file has a master-file [|latex-master-file|] defined
   for it, then Latex-Suite will perform the following steps on that file
   instead of on the current file.
   
   

2. First, the file is scanned for a \bibliography command. To explain better,
   assume that a command >
       \bibliography{file1,file2}
<  is found in the present file. For each bibliography file, say file1,
   Latex-Suite first tries to see if a .bib file, file1.bib can be found. If so,
   it will scan it for bib-keys of the form @BOOK{ etc., and add these searches
   to the completion list. If a .bib file cannot be found, then it will try to
   see if file1.bbl can be found. If so, Latex-Suite will search it for bib-keys
   of the form \bibitem and add these to the completion list.
   
   You can set the location where Latex-Suite will search for .bib and .bbl
   files using the |Tex_BIBINPUTS| [|Tex_BIBINPUTS|] variable.
   
   

3. If a \bibliography command is not found, then Latex-Suite tries to scan the
   present file for a \begin{thebibliography} environment. If found, Latex-Suite
   searches the present file for bib-keys of the form \bibitem.
   
   

4. Finally, it will try to see if this file includes other files via the \input
   command. For each such file found, Latex-Suite will repeat the previous two
   steps stopping at the first file which has either a \bibliography command or
   a thebibliography environment.
   
   


Caching the \cite completion results                       *ls_5_1_1*
                                                           *cite-search-caching*

                                                                *TClearCiteHist*
Often times, the editing cycle proceeds by first laying out a comprehensive
bibliography and then completing all the \cite commands in one session. In such
situations, it is inefficient to scan the whole list of bibliography files for
bib-keys each time. Latex-Suite provides a way to cache the results of the cite
completion search using the Tex_RememberCiteSearch [|Tex_RememberCiteSearch|]
variable. If set, Latex-Suite will perform the search only the first time <F9>
is used. Next time on, it will reuse the search results. If you wish to redo the
search results, issue the command >
    TClearCiteHist
This will redo the completion list next time you use <F9>.

================================================================================
Compiling LaTeX files via Latex-Suite                          *ls_6*
                                                               *latex-compiling*

|ls_6_1| Setting Compilation rules.
|ls_6_2| Specifying which file to compile
|ls_6_3| Customizing the compiler output
|ls_6_4| Compiling parts of a file


This functionality, available via the TeX-Suite menu, provides various tools to
compile and debug LaTeX files from within Vim.

If you are using commonly used LaTeX tools, then you should be all set as soon
as you download and install latex-suite. In order to compile a LaTeX file,
simply press \ll while editing the file. This runs latex on the current file and
displays the errors in a |quickfix-window|. You can then scroll through the
errors and press <enter> to be taken to the location of the corresponding error.
Along with the errors being listed in the quickfix window, the corresponding log
file is also opened in |preview| mode beneath the quickfix window. It is
scrolled automatically to keep in sync with the error being viewed in the
quickfix window.

Latex-Suite also supports compiling LaTeX into formats other than DVI. By
default, Latex-Suite supports PDF and PS formats. In order to choose a format
other than DVI, use the TTarget command or the TeX-Suite > Target Format menu
item. This will ask you to type in the name of the target format you want to
compile to. If a rule has been defined for the format (as described in the next
section [|compiler-rules|]), then Latex-Suite will switch to that format.

Trying to choose a format for which no rule has been defined will result in
Latex-Suite displaying a warning message without taking any action.


--------------------------------------------------------------------------------
Setting Compilation rules.                                      *ls_6_1*
                                                                *compiler-rules*

In order to compile LaTeX files into various formats, Latex-Suite needs to know
which external programs to call and in which way they need to be called. This
information is provided to Latex-Suite via a number of "rules". For each format
you want to compile to, you need to specify a rule. A rule is specified by
defining a variable of the form: >
    g:Tex_CompileRule_<format>
where <format> is a string like "pdf", "dvi" etc.

Example: By default, Latex-Suite uses the following rule for compiling LaTeX
documents into DVI. >
    g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'


Default values are also provided for ps and pdf formats. You might want to
change these rules in texrc according to your local tex environment.

NOTE: Handling Dependencies in compilation
      ------------------------------------
      Specifying a different format does not automatically account for
      dependencies. For example, if in your case, you use >
          .tex -> .dvi -> .ps -> .pdf
<     to generate PDF files from DVI, then you will need to choose dvi first,
      compile, change format to ps, compile, change format and so on. You could
      automate this via a mapping as follows: >
          function! Tex_CompileToPDF()
              TCTarget dvi
              normal \ll
              TCTarget ps
              normal \ll
              TCTarget pdf
              normal \ll
          endfunction
          nmap \pdf :call Tex_CompileToPDF()<CR>
<     
      
      
NOTE: For win32 users user MikTeX, sometimes the latex compiler's output has a
      bug where a single number is split across different lines. In this case,
      put the included vim-latex file distributed with Latex-Suite.
      
      

--------------------------------------------------------------------------------
Specifying which file to compile                             *ls_6_2*
                                                             *latex-master-file*

Often times the file you are currently editing is only a fragment being
\input'ed into a master tex file. In such cases you will need to do create a
dummy file in the directory containing the current file. This dummy file is of
the form: <mainfilename>.latexmain

As an example, suppose you have the following setup: >
    % file: main.tex
    \documentclass{report}
    \begin{document}
    
    \input{chapter1.tex}
    
    \end{document}
In other words, even when you are editing chapter1.tex, you want to compile
main.tex. In this situation, create a file called main.tex.latexmain in the
directory containing chapter1.tex (and main.tex). After doing this, when you
press \ll while editing chapter1.tex, then Latex-Suite will compile main.tex
instead.

NOTE: Here main.tex.latexmain is (obviously) a different file from main.tex
      itself. main.tex need not be renamed. The contents of main.tex.latexmain
      are not used. This ofcourse restricts each directory to have a single
      master file.
      
      

--------------------------------------------------------------------------------
Customizing the compiler output                  *ls_6_3*
                                                 *compiler-output-customization*

Most LaTeX compilers produce a very large amount of output during compilation,
most of which is not relevant to debugging type-setting errors. The compiler
plugin provided with Latex-Suite (which is an enhanced version of the standard
compiler plugin maintained by Artem Chuprina), provides a way to filter the
compiler output so that the actual errors/warnings can be presented much more
concisely.

The compiler plugin is set up by default to function in a "non-verbose",
"ignore-common-warnings" mode, which means that irrelevant lines from the
compiler output will be ignored and some very common warnings are also ignored.
Latex-Suite does this via the global variable g:Tex_IgnoredWarnings
[|Tex_IgnoredWarnings|]. This is a list of patterns, which can be used to filter
out (or ignore) some or the warnings and errors reported by the compiler. See
the link above for its default value.

Latex-Suite uses the g:Tex_IgnoreLevel [|Tex_IgnoreLevel|] setting to set a
default ignore level. For example, for the default value of 4, Latex-Suite
ignores warnings and errors matching the first 4 patterns in
g:Tex_IgnoredWarnings.

In addition to setting a default value of the ignore level, Latex-Suite provides
the ability to set the level dynamically, using the TCLevel command. For
example, if you issue the command: >
    TCLevel 3
from within Vim, then the next time you compile the document, Latex-Suite will
ignore warnings and errors which match the first three patterns in
g:Tex_IgnoredWarnings.

When TCLevel is called with the unquoted string strict as follows: >
    TClevel strict
then Latex-Suite switches to a "verbose", "no-lines-ignored" mode which is
useful when you want to make final checks of your document and want to be
careful not to let things slip by.

See the explanation of the settings g:Tex_IgnoredWarnings
[|Tex_IgnoredWarnings|] and g:Tex_IgnoreLevel [|Tex_IgnoreLevel|] to find out
how to customize the filtering done by Latex-Suite

--------------------------------------------------------------------------------
Compiling parts of a file                                       *ls_6_4*
                                                                *part-compiling*

Latex-Suite also provides a way to compile a fragment of a document. This can be
very useful while debugging a complex equation or one chapter in a book, etc.

To do this, visually select a portion of the text and press \ll while in visual
mode. The visually selected portion will be saved to a temporary file with the
preamble from the current document prepended. Latex-Suite will then switch focus
to this temporary file and compile it. Continue to debug this file as required
and then replace the portion of the original file with this one.

Pressing \lv while viewing the temporary file will view the output file
generated from the temporary file, not the original file

Two commands |TPartComp| and |TPartView| are provided to be able to get this
functionality via the command line.

================================================================================
Latex Viewing and Searching                                      *ls_7*
                                                                 *latex-viewing*

|ls_7_1| Forward Searching DVI documents
|ls_7_2| Inverse Searching


If you are usingly commonly used LaTeX tools to view output files, then you
should be able to view compiled files from within Vim by simply pressing \lv.

NOTE: The viewing function also takes the *.latexmain [|latex-master-file|] file
      into account to decide which file to show.
      
      
If pressing \lv does not work, then it most probably has to do with incorrect
settings of the where <format> is the format you are attempting to view. See the
link above for how to set this according to your system.

In addition to viewing the files, Latex-Suite also supports forward and inverse
searching for certain common tools for viewiing DVI documents. At the moment,
there is built-in support for YAP on windows (which ships with MikTeX), and the
popular xdvi on *nix platforms. See the next few sections for details on forward
and inverse searching.


--------------------------------------------------------------------------------
Forward Searching DVI documents                              *ls_7_1*
                                                             *forward-searching*

Forward searching refers to making a DVI viewer display a given document at a
given location from within Vim. At present, this functionality is supported for
YAP on windows and xdvi on *nix machines. Pressing \ls from within Vim should
make the DVI viewer display the portion of the document where your cursor is
placed.

                                                            *enabling-searching*
NOTE: Enabling Forward and Inverse Searching
      --------------------------------------
      Most DVI viewers need "source-special" information in order to do forward
      (and inverse) searching. This information is embedded in the dvi file if
      the LaTeX source is compiled with the --src-specials option. By default,
      Latex-Suite does not supply this argument to the compiler. See the section
      on to find out how this option can be set.
      
      

--------------------------------------------------------------------------------
Inverse Searching                                            *ls_7_2*
                                                             *inverse-searching*

Inverse searching refers to the DVI viewer telling Vim to display the LaTeX
source file at a given location when you double-click in the DVI viewer window.

You will need to enable searching [|enabling-searching|] in order to use this
functionality.

You will also need to specify certain settings to the DVI viewer conveying the
syntax which it needs to use to tell Vim how to display the source file. In YAP,
you can set this option in View > Options > Inverse Search. The Command Line
field needs to be set as follows: >
    "C:\Program Files\vim\vim61\gvim" -c ":RemoteOpen +%l %f"
The command :RemoteOpen is supplied when you install Latex-Suite.

On *nix machines, Latex-Suite attempts to call the DVI viewer in such a way that
it already knows how to communicate with Vim. If this does not seem to be
working, you can use the RemoteOpen command described above.

================================================================================
Latex Folding                                                    *ls_8*
                                                                 *latex-folding*

|ls_8_1| Default Folding Scheme in Latex-Suite
|ls_8_2| Customizing what to fold


Latex-suite ships with the plugin SyntaxFolds.vim which is a plugin for creating
"fake" syntax folds on the fly. The fold method is actually manual but the
folding is based on LaTeX syntax. This offers a speed increase over regular
syntax folding. Ofcourse it has the disadvantage that the folds are not dynamic,
i.e newly created syntax items are not automatically folded up. (This is a
compromise between speed and convinience).

When you open up a LaTeX file, all the portions will be automatically folded up.
However, no new folds will be created until you press <F6> or \rf. (rf stands
for "refresh folds").

The fold-text is set to the first line of the folded text unless the fold is a
table, figure etc. (an environment). In this case, if a \caption and/or a label
is found in the folded region, then those are used to make a more meaningful
fold-tex, otherwise the second line of the environment is displayed along with
the name of the environment. In other words, the following

 >
    \begin{figure}[h]
        \centerline{\psfig{figure=slidercrank.eps,height=6cm}}
        \caption{The Slider Crank Mechanism.}
        \label{fig:slidercrank}
    \end{figure}
    % a LaTeX comment.
    \begin{eqnarray}
        \sin(\pi) = 0
    \end{eqnarray}
< will be shown as:
  >
    +---  5 lines: figure (fig:slidercrank) : The Slider Crank Mechanism. -----
    % a LaTeX comment.
    +---  3 lines: eqnarray () : \sin(\pi) = 0 --------------------------------

--------------------------------------------------------------------------------
Default Folding Scheme in Latex-Suite                          *ls_8_1*
                                                               *default-folding*

By default Latex-Suite creates folds in the following manner:

 >
    \chapter
    \section
    %%fakesection
        \subsection
            \subsubsection
                \item
                    \equation
                    \eqnarray
                    \figure
                    \table
                    \footnote
The indentation shows the "nestedness" of the folding scheme. See the next
section [|customizing-what-to-fold|] to see how you can change this scheme.

--------------------------------------------------------------------------------
Customizing what to fold                              *ls_8_2*
                                                      *customizing-what-to-fold*

At this time, there is no setting available to tweak the folds which are created
by Latex-Suite. However, the folds created by Latex-Suite are listed in
$VIM/ftplugin/latex-suite/folding.vim. You will need to modify the function
MakeTexFolds() defined in that file to modify the fold syntax. MakeTexFolds
makes a number of calls to AddSyntaxFoldItem. Each such call defines a new "fold
item". The order in which these calls are made defines how the folds are nested.
For example, if you desire an figure environment to be nested within a section,
then you should define the fold for the figure first. The syntax of
AddSyntaxFoldItem is as follows: >
    AddSyntaxFoldItem(startpat, endpat, startoff, endoff [, startskip, endskip])
If the last two arguments are omitted, then they are assumed to default to the
empty strings ''. The explanation for each argument is as follows:

Argument     Explanation~
startpat     a line matching this pattern defines the beginning of a fold.
endpat       a line matching this pattern defines the end of a fold.
startoff     this is the offset from the starting line at which folding will
             actually start
endoff       like startoff, but gives the offset of the actual fold end from the
             line satisfying endpat. startoff and endoff are necessary when the
             folding region does not have a specific end pattern corresponding to
             a start pattern. for example in latex, \begin{section} defines the
             beginning of a section, but its not necessary to have a corresponding
             \end{section} the section is assumed to end 1 line before another
             section starts.
startskip    A Pattern Which Defines The Beginning Of A "Skipped" Region.
             
             For example, suppose we define a \itemize fold as follows: >
                  =  '^\s*\\item',
                  = '^\s*\\item\|^\s*\\end{\(enumerate\|itemize\|description\)}',
                  = 0,
                  = -1
<            
             
             This defines a fold which starts with a line beginning with an \item
             and ending one line before a line beginning with an \item or
             \end{enumerate} etc.
             
             Then, as long as \item's are not nested things are fine. However,
             once items begin to nest, the fold started by one \item can end
             because of an \item in an \itemize environment within this \item.
             i.e, the following can happen: >
                 \begin{itemize}
                 \item Some text                         <------- fold will start here
                 This item will contain a nested item
                 \begin{itemize}                         <----- fold will end here because next line contains \item...
                 \item Hello  
                 \end{itemize}                           <----- ... instead of here.
                 \item Next item of the parent itemize  
                 \end{itemize}
<            
             
             Therefore, in order to completely define a folding item which allows
             nesting, we need to also define a "skip" pattern. startskip and end
             skip do that. Leave '' when there is no nesting.
endskip      the pattern which defines the end of the "skip" pattern for nested
             folds.

NOTE: Example 1
      ---------
      A syntax fold region for the latex section is defined with the following
      arguments to AddSyntaxFoldItem: >
          startpat = "\\section{"
          endpat   = "\\section{"
          startoff = 0
          endoff   = -1
          startskip = ''
          endskip = ''
<     Note that the start and end patterns are thus the same and endoff has a
      negative value to capture the effect of a section ending one line before
      the next starts.
      
      
NOTE: Example 2
      ---------
      A syntax fold region for the \itemize environment is: >
          startpat = '^\s*\\item',
          endpat = '^\s*\\item\|^\s*\\end{\(enumerate\|itemize\|description\)}',
          startoff = 0,
          endoff = -1,
          startskip = '^\s*\\begin{\(enumerate\|itemize\|description\)}',
          endskip = '^\s*\\end{\(enumerate\|itemize\|description\)}'
<     Note the use of startskip and endskip to allow nesting.
      
      

================================================================================
Latex-Suite Commands and Maps                        *ls_9*
                                                     *latex-suite-commands-maps*

|ls_9_1| Latex-Suite Maps
|ls_9_2| Latex Suite Commands


LatexSuite defines set of commands for non-GUI and power users. They are taking
care about Macros, Templates and Packages.


--------------------------------------------------------------------------------
Latex-Suite Maps                                              *ls_9_1*
                                                              *latex-suite-maps*
|ls_9_1_1| IMAP mappings
|ls_9_1_2| Alt-Key mappings

                                                    *remapping-latex-suite-keys*
Most of the mappings used in Latex-Suite can be mapped to a different key
combination to suit your particular needs. An example best explains the
procedure for doing this. Suppose you want to remap the <C-j> key which
Latex-Suite (actually imaps.vim) uses to jump to the next placeholder. To do
this, you first need to find out which <Plug> mapping <C-j> is derived from. You
will need to look at the relevant section of this manual to do this. For
example, the section IMAP mappings [|customize-imap-maps|] has the information
that the <C-j> key is derived from <Plug>IMAP_JumpForward. Therefore to remap
the <C-j> key to say <C-space>, you will need to put a statement like the
following in your ~/.vimrc. >
    imap <C-space> <Plug>IMAP_JumpForward


NOTE: To change the IMAP mappings which affect jumping between placeholders, the
      map statement above has to be placed in your ~/.vimrc. For other mappings
      you can place the map statement in your $VIM/ftplugin/tex.vim file.
      
      The reason for this is that the <C-j> maps are created in
      plugin/imaps.vim, which is sourced as soon as Vim starts before sourcing
      any ftplugin files.
      
      


IMAP mappings                                              *ls_9_1_1*
                                                           *customize-imap-maps*

These mappings are utlilized for jumping between placeholders as described here
[|place-holders|]. See the parent section [|latex-suite-maps|] to find out how
to use this information to change the default maps.

                                                         *Plug_IMAP_JumpForward*
                                                            *Plug_IMAP_JumpBack*
                                                *Plug_IMAP_DeleteAndJumpForward*
                                                    *Plug_IMAP_DeleteAndJumBack*
Plug map                           Default Key~
<Plug>IMAP_JumpForward             <C-j>
<Plug>IMAP_JumpBack                (none)
<Plug>IMAP_DeleteAndJumpForward    (none)
<Plug>IMAP_DeleteAndJumpBack       (none)

<Plug>IMAP_JumpForward takes you to the location of the next place-holder
[|place-holders|].

<Plug>IMAP_JumpBack takes you to the previous place-holder [|place-holders|].

<Plug>IMAP_DeleteAndJumpForward deletes the presently selected place-holder and
jumps to the next place-holder irrespective of whether the present placeholder
is empty or not and ignoring the value of place-holder settings like
g:Imap_DeleteEmptyPlaceHolders [|Imap_DeleteEmptyPlaceHolders|] and
g:Imap_StickyPlaceHolders [|Imap_StickyPlaceHolders|]

<Plug>IMAP_DeleteAndJumpBack deletes the presently selected place-holder and
jumps to the previous place-holder irrespective of whether the present
placeholder is empty or not and ignoring the value of place-holder settings like
g:Imap_DeleteEmptyPlaceHolders [|Imap_DeleteEmptyPlaceHolders|] and
g:Imap_StickyPlaceHolders [|Imap_StickyPlaceHolders|]


Alt-Key mappings                                        *ls_9_1_2*
                                                        *customize-alt-key-maps*

These mappings are are described in the section Alt key macros
[|bracketing-macros|]. See the parent section [|remapping-latex-suite-keys|] to
see how to use the following information to remap keys.

                                                               *Plug_Tex_MathBF*
                                                              *Plug_Tex_MathCal*
                                                            *Plug_Tex_LeftRight*
Plug Mapping           Default Key~
<Plug>Tex_MathBF       <Alt-B>
<Plug>Tex_MathCal      <Alt-C>
<Plug>Tex_LeftRight    <Alt-L>

--------------------------------------------------------------------------------
Latex Suite Commands                                      *ls_9_2*
                                                          *latex-suite-commands*
|ls_9_2_1| :TMacro [{macro}]
|ls_9_2_2| TMacroEdit [{macro}]
|ls_9_2_3| :TMacroNew
|ls_9_2_4| :TMacroDelete [{macro}]
|ls_9_2_5| :TPackage [{package, ...}]
|ls_9_2_6| :TPackageUpdate
|ls_9_2_7| :TPackageUpdateAll
|ls_9_2_8| :TTemplate [{template}]
|ls_9_2_9| :TSection [{argument}]
|ls_9_2_10| TSectionAdvanced
|ls_9_2_11| TLook
|ls_9_2_12| TLookBib
|ls_9_2_13| TLookAll
|ls_9_2_14| TPartComp
|ls_9_2_15| TPartView
|ls_9_2_16| Tshortcuts [{arg}]



:TMacro [{macro}]                                            *ls_9_2_1* *TMacro*

When used without any arguments lists all available macros defined in
latex-suite/macros/ directory and prompts you to choose one of them. With one
argument |:read| this macro under cursor position. With more than one argument
it will not work :)


TMacroEdit [{macro}]                                                *ls_9_2_2*
                                                                    *TMacroEdit*

Splits window for editing {macro}. When used without any arguments lists all
available macros defined in latex-suite/macros/ directory and prompt you to
choose one of them.


:TMacroNew                                                           *ls_9_2_3*
                                                                     *TMacroNew*

Splits window to write new macro. Directory in new buffer is locally changed to
latex-suite/macros/.


:TMacroDelete [{macro}]                                           *ls_9_2_4*
                                                                  *TMacroDelete*

Delets {macro} from latex-suite/macros/ directory. When used without any
arguments lists all available macros defined in latex-suite/macros/ directory
and prompt you to choose one of them.


:TPackage [{package, ...}]                                            *ls_9_2_5*
                                                                      *TPackage*

When used without any arguments lists name of the packages for which support is
available. Report depends if you are using GUI version and/or g:Tex_Menus
[|Tex_Menus|] is set to 1 or not. When you are not using menus command lists
files from latex-suite/dictionaries/ (this is main support for non-menus version
of latexSuite) if menus are on |TPackage| lists files from latex-suite/packages/
directory.

When {package} is given command turns on all possible support for this {package}
(|latex-menu-packages|, |latex-packages-dictionary|). Number of arguments
separated with spaces is limited only with common sense.


:TPackageUpdate                                                 *ls_9_2_6*
                                                                *TPackageUpdate*

This command `reads' name of package under cursor and turns on possible support.


:TPackageUpdateAll                                           *ls_9_2_7*
                                                             *TPackageUpdateAll*

After issuing this command latexSuite scans the file in looking for not declared
packages, removing not needed entries from Packages menu and turning off not
necessary packages' dictionaries.


:TTemplate [{template}]                                              *ls_9_2_8*
                                                                     *TTemplate*

When used without any arguments lists all available templates from
latex-suite/templates/ directory and prompts to choose one of them. With one
argument :0|read| {template} file. With more than one argument it will not work
:)


:TSection [{argument}]                                                *ls_9_2_9*
                                                                      *TSection*

Used without any arguments inserts last section type (|latex-sectioning|).
Accepts arguments: n> inserts section name in <n> logical level. Levels are:
0    part
1    chapter
2    section
3    subsection
4    subsubsection
5    paragraph
6    subparagraph


+<n>    inserts section name <n> logical levels above the last used comand
-<n>    inserts section name <n> logical levels below the last used comand
+       inserts section name one logical level below the last used command (equal
        to +1).
++      inserts section name two logical levels below the last used command (equal
        to +2).
-       inserts section name one logical level over the last used command (equal
        to -1).
--      inserts section name two logical levels over the last used command (equal
        to -2).



Command accepts also latexSuite mappings (|latex-macros|) without preceding S
and in lowercase: >
    :TSection pa
will result in \part{}. It is possible to use full names of sections: :TSection
part


TSectionAdvanced                                              *ls_9_2_10*
                                                              *TSectionAdvanced*

Accepts the same arguments as |TSection| but leads to a couple of questions
(whether you want to include the section in the table of contents, whether there
is a shorter name for the table of contents) and then creates a more intelligent
template.


TLook                                                        *ls_9_2_11* *TLook*

Accepts one argument. Will look through .tex files in directory of edited file
for argument. It can be regexp. You don't have to enclose argument in "". <cr>
takes you to location. Other keys work as described in |latex-viewer|. Note:
TLook uses :grep command and is using 'grepprg'. Its regular expressions can be
different from those of Vim.


TLookBib                                                             *ls_9_2_12*
                                                                     *TLookBib*

Accepts one argument. Will look through .bib files in directory of edited file
for argument. It can be regexp. You don't have to enclose argument in "". <cr>
takes you to location. Other keys work as described in |latex-viewer|. Note:
TLookBib uses :grep command and is using 'grepprg'. Its regular expressions can
be different from those of Vim.


TLookAll                                                             *ls_9_2_13*
                                                                     *TLookAll*

Accepts one argument. Will look through all files in directory of edited file
for argument. It can be regexp. You don't have to enclose argument in "". <cr>
takes you to location. Other keys work as described in |latex-viewer|. Note:
TLookuses :grep command and is using 'grepprg'. Its regular expressions can be
different from those of Vim.


TPartComp                                                            *ls_9_2_14*
                                                                     *TPartComp*

No argument allowed but accepts range in all formats. Define fragment of
interest with :'a,'b, :/a/,/b/, :'<,'> or :20,30. All other rules of compilation
apply.


TPartView                                                            *ls_9_2_15*
                                                                     *TPartView*

Show last compiled fragment. All rules of viewing apply but |latex-searching|.


Tshortcuts [{arg}]                                                  *ls_9_2_16*
                                                                    *Tshortcuts*

Show shortcuts in terminal (not using menu). Without {arg} you will see simple
menu prompting for one of them. Possible arguments:
g    General shortcuts
e    Environment shortcuts
f    Font shortcuts
s    Section shortcuts
a    All shortcuts

================================================================================
Customizing Latex-Suite                                *ls_10*
                                                       *customizing-latex-suite*

|ls_10_1| Place-Holder Customization
|ls_10_2| Macro Customization
|ls_10_3| Smart Key Customization
|ls_10_4| Latex Completion Customization
|ls_10_5| Compiler Customization
|ls_10_6| Viewer Customization
|ls_10_7| Menu Customization
|ls_10_8| Folding Customization
|ls_10_9| Package Handling Customization


Customizing Latex-Suite is done by defining certain global variables in
$VIM/ftplugin/tex/texrc.vim, where $VIM corresponds to ~/.vim for *nix machines
and ~/vimfiles for windows machines. This file is not part of the Latex-Suite
distribution. You will need to create this file if you need to change any
default settinngs. Since this file is not included as part of the Latex-Suite
distribution, it will not be over-written in subsequent updates.

NOTE: It is also possible to define any customization in the
      $VIM/ftplugin/tex.vim file, but for the sake of clarity, you might want to
      use the texrc.vim file described above
      
      
The default settings in Latex-Suite are defined in
$VIM/ftplugin/latex-suite/texrc. Please take a look at this file if you find
this documentation incomplete or confusing. That file is also well documented.

This chapter describes the various settings which effect Latex-Suite and their
default values. The settings are broken up into sections according to the
behavior which they influence.


--------------------------------------------------------------------------------
Place-Holder Customization                           *ls_10_1*
                                                     *customizing-place-holders*
|ls_10_1_1| g:Imap_UsePlaceHolders
|ls_10_1_2| g:Imap_PlaceHolderStart & g:Imap_PlaceHolderEnd
|ls_10_1_3| g:Imap_DeleteEmptyPlaceHolders
|ls_10_1_4| g:Imap_StickyPlaceHolders

Latex-Suite uses place-holders [|place-holders|] to minimize using the movement
keys while typing. The following settings affect how place-holders are used.

NOTE: These setting need to be set in your ~/.vimrc, not $VIM/ftplugin/tex.vim
      because these settings affect the behavior of imaps.vim, which is a global
      plugin, not a file-type plugin.
      
      


g:Imap_UsePlaceHolders                                    *ls_10_1_1*
                                                          *Imap_UsePlaceHolders*


Type             Boolean
Default Value    1

Setting this to zero completeley disables using place-holders.


g:Imap_PlaceHolderStart & g:Imap_PlaceHolderEnd          *ls_10_1_2*
                                                         *Imap_PlaceHolderStart*

                                                           *Imap_PlaceHolderEnd*
Setting                  Type      Value~
Imap_PlaceHolderStart    String    '<+'
Imap_PlaceHolderEnd      String    '+>'

These settings affect the strings displayed at the beginning and end of the
place-holder string. Set these strings to a value different than a commonly
ocurring sequence of characters.

NOTE: TIP
      ---
      If you use the latin1 encoding and do not type in french, then you can set
      these strings to the \xab and \xbb characters (the french quotation
      marks).
      
      


g:Imap_DeleteEmptyPlaceHolders                    *ls_10_1_3*
                                                  *Imap_DeleteEmptyPlaceHolders*


Type             Boolean
Default Value    1

When set to one, non-descriptive or empty place-holders are deleted on pressing
<Ctrl-J>.


g:Imap_StickyPlaceHolders                              *ls_10_1_4*
                                                       *Imap_StickyPlaceHolders*


Type             Boolean
Default Value    1

When set to 1, in visual mode, <Ctrl-J> takes you to the next placeholder
without deleting the current placeholder.

--------------------------------------------------------------------------------
Macro Customization                                         *ls_10_2*
                                                            *customizing-macros*
|ls_10_2_1| g:Tex_UseMenuWizard
|ls_10_2_2| g:Tex_CatchVisMapErrors
|ls_10_2_3| g:Tex_Diacritics
|ls_10_2_4| g:Tex_Leader
|ls_10_2_5| g:Tex_Leader2
|ls_10_2_6| g:Tex_PromptedEnvironments
|ls_10_2_7| g:Tex_HotKeyMappings

The following variables disable various parts of the macro functionality of
Latex-Suite. See the links to the relevant sections to see what functionality
setting each of the variables to zero will take away.

                                                           *Tex_EnvironmentMaps*
                                                          *Tex_EnvironmentMenus*
                                                                  *Tex_FontMaps*
                                                                 *Tex_FontMenus*
                                                               *Tex_SectionMaps*
                                                              *Tex_SectionMenus*
Setting                   Link to relevant section                 Default Value~
g:Tex_EnvironmentMaps     Environment Mappings                     1
                          [|insert-mode-environment-mappings|]     
g:Tex_EnvironmentMenus                                             1
g:Tex_FontMaps            Font Mappings [|font-maps|]              1
g:Tex_FontMenus                                                    1
g:Tex_SectionMaps         Section Mappings [|section-mappings|]    1
g:Tex_SectionMenus                                                 1



g:Tex_UseMenuWizard                                          *ls_10_2_1*
                                                             *Tex_UseMenuWizard*


Type             Boolean
Default Value    0

If this variable is set to 1, then when an enviroment is chosen from the menu
then for selected environments, latex-suite asks a series of questions on the
command line and inserts a template with the corresponding fields already filled
in. Setting this to zero will insert a template with place-holders
[|place-holders|] marking off the places where fields need to be filled.


g:Tex_CatchVisMapErrors                                  *ls_10_2_2*
                                                         *Tex_CatchVisMapErrors*


Type             Boolean
Default Value    1

With so many visual maps, its helpful to have a way of catching typing errors
made in visual mode. What this does is to prompt you to correct your visual mode
mapping if you start out with and then type some illegal keys. It basically maps
just the g:Tex_Leader character to a function.


g:Tex_Diacritics                                                *ls_10_2_3*
                                                                *Tex_Diacritics*


Type             Boolean
Default Value    0

Whether or not you want to use diacritics [|diacritic-mappings|].


g:Tex_Leader                                                        *ls_10_2_4*
                                                                    *Tex_Leader*


Type             String
Default Value    '`'

The mappings in latex-suite are by default prefixed with the back-tick
character. For example, `/ inserts \frac{<++>}{<++>}<++> etc. You can change the
prefix with the following setting. ',', '/', '`' are preferred values. '' or '\'
will lead to a lot of trouble.

g:Tex_Leader is also used for visual mode mappings for fonts.


g:Tex_Leader2                                                      *ls_10_2_5*
                                                                   *Tex_Leader2*


Type             String
Default Value    ','

In order to avoid clashes between the large number of visual mode macros
provided, the visual mode macros for environments
[|visual-mode-environment-mapings|] and sections start with a character
different from g:Tex_Leade.


g:Tex_PromptedEnvironments                            *ls_10_2_6*
                                                      *Tex_PromptedEnvironments*


Type             String
Default Value    'eqnarray*,eqnarray,equation,equation*,\[,$$,align,align*'

This string represents a comma seperated list of fields corresponding to
environments. Pressing <F5> in insert-mode in the body of the document asks you
to choose from one of these environments to insert.

Leaving this string empty will leave the <F5> key unmapped


g:Tex_HotKeyMappings                                        *ls_10_2_7*
                                                            *Tex_HotKeyMappings*


Type             String
Default Value    'eqnarray*,eqnarray,bmatrix'

This string represents a comma seperated list of environments which are mapped
to <Shift-F-1> through <Shift-F-4>. For example, pressing <Shift-F-2> with this
setting inserts the eqnarray environment.

Leaving this string empty will leave <Shift-F-1> through <Shift-F-4> unmapped.

NOTE: Only the first four fields of this list are used. The rest are silently
      ignored.
      
      

--------------------------------------------------------------------------------
Smart Key Customization                                 *ls_10_3*
                                                        *customizing-smart-keys*
|ls_10_3_1| g:Tex_SmartKeyBS
|ls_10_3_2| g:Tex_SmartKeyQuote

These settings affect the smart key functionality as described here
[|smart-keys|].



g:Tex_SmartKeyBS                                                *ls_10_3_1*
                                                                *Tex_SmartKeyBS*


Type             Boolean
Default Value    1

Whether or not <Backspace> deletes diacritics.


g:Tex_SmartKeyQuote                                          *ls_10_3_2*
                                                             *Tex_SmartKeyQuote*


Type             Boolean
Default Value    1

Whether or not the smart quotes [|smart-keys|] functionality is available.

If enabled, the quote characters can be customized by setting the following
variables:

Setting                  Value~
g:Tex_SmartQuoteOpen     "``"
g:Tex_SmartQuoteClose    "''"

Non-english users will want to change these settings to their locale. These
global variables will be ignored if there are buffer-local variables (with the
same name), which may be set in the language specific package files, such as
$VIM/ftplugin/latex-suite/packages/german.

--------------------------------------------------------------------------------
Latex Completion Customization                    *ls_10_4*
                                                  *customizing-latex-completion*
|ls_10_4_1| Window size settings
|ls_10_4_2| g:Tex_BIBINPUTS
|ls_10_4_3| g:Tex_RememberCiteSearch

The following settings affect the completion [|latex-completion|] functionality
in Latex-Suite.



Window size settings                             *ls_10_4_1*
                                                 *completion-window-preferences*

These three settings affect the aesthetics of the completion functionality.

                                                       *Tex_ViewerCwindowHeight*
                                                       *Tex_ViewerPreviewHeight*
                                                            *Tex_ExplorerHeight*
                                                                  *Tex_ImageDir*
Setting                      Explanation                         Default Value~
g:Tex_ViewerCwindowHeight    The height of the cwindow which     5
                             displays the list of \labels        
                             etc.                                
g:Tex_ViewerPreviewHeight    The height of the preview window    10
                             which shows the context of a        
                             \label etc.                         
g:Tex_ExplorerHeight         The height of the explorer          10
                             window which lists the files        
                             from which to choose an image       
                             file.                               
g:Tex_ImageDir               The directory to scan for images    ''


g:Tex_BIBINPUTS                                                  *ls_10_4_2*
                                                                 *Tex_BIBINPUTS*


Type             string
Default Value    ''

This string describes the directories which are scanned while trying to search
for .bib and .bbl files. See the cite completion section
[|latex-completion-cite|] for more details.

This string should be set in the syntax accepted by Vim's native 'path' setting.
Do not include the present directory '.'. While searching for bibliography
files, the present directory will be prepended to this variable.


g:Tex_RememberCiteSearch                                *ls_10_4_3*
                                                        *Tex_RememberCiteSearch*


Type             Boolean
Default Value    0

When this variable is non-zero, then Latex-Suite will try to remember results
from the \cite completion as described in this section [|cite-search-caching|].

--------------------------------------------------------------------------------
Compiler Customization                                  *ls_10_5*
                                                        *compiler-customization*
|ls_10_5_1| g:Tex_DefaultTargetFormat
|ls_10_5_2| g:Tex_CompileRule_<format>
|ls_10_5_3| g:Tex_IgnoredWarnings
|ls_10_5_4| g:Tex_IgnoreLevel

The following settings affect Latex-Suite's compilation functionality



g:Tex_DefaultTargetFormat                              *ls_10_5_1*
                                                       *Tex_DefaultTargetFormat*


Type             String
Default Value    dvi for windows/*nix and
                 pdf for mac

Use this setting to choose the default compilation target. For example, setting
this to pdf makes Latex-Suite compile a pdf file when you press \l. Make sure
that a rule has been defined for compiling to this target format as described
here [|Tex_CompileRule_format|].


g:Tex_CompileRule_<format>                              *ls_10_5_2*
                                                        *Tex_CompileRule_format*

Here <format> refers to the target format for which this rule is defined.
Latex-Suite supports compiling into dvi, ps and pdf by default. All these rules
are strings defined by default as follows:


g:Tex_CompileRule_dvi    'latex
                         -interaction=nonstopmode
                         $*'
g:Tex_CompileRule_ps     'ps2pdf $*'
g:Tex_CompileRule_pdf    'pdflatex
                         -interaction=nonstopmode
                         $*'

If you desire forward and inverse searching via Latex-Suite, you will need to
change g:Tex_CompileRule_dvi to include -src-specials. However, this has been
known to cause problems with the output file. Therefore, use this with care.


g:Tex_IgnoredWarnings                                      *ls_10_5_3*
                                                           *Tex_IgnoredWarnings*


Type             String
Default Value    a new-line seperated list of patterns as described below

The default value of this setting is >
    \"Underfull\n".
    \"Overfull\n".
    \"specifier changed to\n".
    \"You have requested\n".
    \"Missing number, treated as zero.\n".
    \"There were undefined references\n"
    \"Citation %.%# undefined"
This setting defines a set of patterns which will be filtered out when
displaying the output from the latex compiler. This is to aid in filtering out
very common warnings/errors.

NOTE: Remember to check the value of g:Tex_IgnoreLevel [|Tex_IgnoreLevel|] when
      you change this setting. For example, if you append a new pattern which
      you would like to ignore by default, increase the value of
      g:Tex_IgnoreLevel.
      
      


g:Tex_IgnoreLevel                                              *ls_10_5_4*
                                                               *Tex_IgnoreLevel*


Type             Integer
Default Value    7

This setting defines a "filter level" or an "ignore level". A value of 7 for
instance means that any warning/error matching with any of the first 7 fields of
g:Tex_IgnoredWarnings [|Tex_IgnoredWarnings|] will be ignored. Setting this
value to zero will mean that no error/warning is ignored. However, even with a
value of zero, Latex-Suite will filter out most of the text which a LaTeX
compiler typically produces. Use >
    TCLevel strict
from within Vim in order to see all the lines from the compiler's output.

--------------------------------------------------------------------------------
Viewer Customization                                      *ls_10_6*
                                                          *viewer-customization*
|ls_10_6_1| g:Tex_ViewRule_<format>

The following settings affect how Latex-Suite will display compiled files.



g:Tex_ViewRule_<format>                                    *ls_10_6_1*
                                                           *Tex_ViewRule_format*

Here <format> refers to a format such as dvi, ps, etc. This variable defines the
program which will be called to display a file of that format.

By default, Latex-Suite defines viewer programs for viewing DVI, PS and PDF
formats as follows:

                      Windows       Unix~
g:Tex_ViewRule_dvi    'yap -1'      'xdvi'
g:Tex_ViewRule_ps     'gsview32'    'ghostview'
g:Tex_ViewRule_pdf    'AcroRd32'    'xpdf'

For Macintosh systems, these strings are left empty by default. This lets the
system pick the program for each format. If you define these variables for Mac,
the system choice will be over-ridden.

NOTE: For windows, you will need to set the $PATH variable to include the paths
      to yap, AcroRd32, gsview32 and any other programs. See your system
      documentation for how to do this.
      
      
NOTE: Default Viewing Format
      ----------------------
      To change the default format for viewing files, set the
      g:Tex_DefaultTargetFormat [|Tex_DefaultTargetFormat|] variable.
      
      

--------------------------------------------------------------------------------
Menu Customization                                           *ls_10_7*
                                                             *customizing-menus*
|ls_10_7_1| g:Tex_Menus
|ls_10_7_2| g:Tex_MathMenus
|ls_10_7_3| g:Tex_NestElementMenus
|ls_10_7_4| g:Tex_PackagesMenu
|ls_10_7_5| g:Tex_NestPackagesMenu
|ls_10_7_6| g:Tex_UseUtfMenus

In addition to using the variables defined in this section to affect the
menu-layout permanently (i.e, the layout Latex-Suite will start with), you can
also use the TeX-Suite > Configure Menu menu to dynamically configure the menu
layout after Latex-Suite has started.



g:Tex_Menus                                                          *ls_10_7_1*
                                                                     *Tex_Menus*


Type             Boolean
Default Value    1

If set to 0, Latex-Suite will suppress showing all menus. Useful if you mostly
work in terminals.


g:Tex_MathMenus                                                  *ls_10_7_2*
                                                                 *Tex_MathMenus*


Type             Boolean
Default Value    1

The Tex-Math menu consists of hundreds of mathematical symbols used in LaTeX.
This menu comprises about 75% of the menus.


g:Tex_NestElementMenus                                    *ls_10_7_3*
                                                          *Tex_NestElementMenus*


Type             Boolean
Default Value    1

This setting controls the "compactness" of the menus. If set to 1, then the
Font, Counter and Dimensioning menus are collected together in a single menu
called Tex-Elements, otherwise, they will each get a seperate menu.


g:Tex_PackagesMenu                                            *ls_10_7_4*
                                                              *Tex_PackagesMenu*


Type             Boolean
Default Value    1

Setting this to zero will stop Latex-Suite from automatically creating the
TeX-Suite > Packages > Supported menu at startup. You can still create the menu
after startup by going to TeX-Suite > Configure Menu.


g:Tex_NestPackagesMenu                                    *ls_10_7_5*
                                                          *Tex_NestPackagesMenu*


Type             String
Default Value    'TeX-'

This string is the prefix added to all the menus created by Latex-Suite. If you
define this variable with a dot ('.') as the last character, then all the menus
created by Latex-Suite will be nested under a single master menu. For example,
set this to '&LaTeX-Suite.' to nest all menus under a menu called &LaTeX-Suite.


g:Tex_UseUtfMenus                                              *ls_10_7_6*
                                                               *Tex_UseUtfMenus*


Type             Boolean
Default Value    0

This setting controls whether Latex-Suite uses utf-8 symbols to display some of
the mathematical symbols in the TeX-Math menu. It is necessary for your
system/GUI to support utf-8. Setting this to 1 has the side-effect of setting
the 'encoding' option of Vim to 'utf-8'.

--------------------------------------------------------------------------------
Folding Customization                                      *ls_10_8*
                                                           *customizing-folding*
|ls_10_8_1| g:Tex_Folding
|ls_10_8_2| g:Tex_AutoFolding

The following settings control the folding [|latex-folding|] functionality of
Latex-Suite.



g:Tex_Folding                                                      *ls_10_8_1*
                                                                   *Tex_Folding*


Type             Boolean
Default Value    1

Setting this to zero completely disables Latex-Suite's folding functionality.
However, the TexFoldTextFunction() is still available in case you want to use
another folding scheme but still want to continue using the fold text function.


g:Tex_AutoFolding                                              *ls_10_8_2*
                                                               *Tex_AutoFolding*


Type             Boolean
Default Value    1

This setting controls whether Latex-Suite automatically creates manual folds for
a file when it is opened. You can still use the \rf mapping to refresh/create
folds even when this variable is set to zero.

--------------------------------------------------------------------------------
Package Handling Customization                            *ls_10_9*
                                                          *customizing-packages*
|ls_10_9_1| g:Tex_TEXINPUTS

These settings affect the custom packages [|custom-packages|] functionality in
Latex-Suite



g:Tex_TEXINPUTS                                                  *ls_10_9_1*
                                                                 *Tex_TEXINPUTS*


Type             string
Default Value    ''

This setting describes the directories scanned by Latex-Suite while searching
for custom user packages as desribed in the custom packages [|custom-packages|]
section. Do not include the present directory in this setting. The present
directory is always scanned for custom packages.

This string should be set in the syntax accepted by Vim's native 'path' setting.

================================================================================
Credits                                                    *ls_11*
                                                           *latex-suite-credits*



And finally, the credits:


Lubomir Host         provided the diacritics and also helped in development.
                     
                     
Alexander Wagner     valuable suggestions during development.
                     
                     
Luc Hermitte         his variation of Stephen Riehm's bracketing system is used in
                     latex-suite.
                     
                     
Gergely Kontra       the clever little JumpFunc() in imaps.vim is due to him. The
                     implementation of the templates also borrows from
                     mu-template.vim by him.
                     
                     
Dimitri Antoniou     author of ltags and also provided the nice tip about forward
                     / reverse search on DVI documents.
                     
                     
Stephen Riehm        the extremely helpful bracketing system is from him.
                     
                     
Alan Schmitt         provided some macros/folding elements.
                     
                     
Hari Krishna Dara    for ExecMap(), the clever little function which makes typing
                     visual mode mappings so much easier and error-free.
                     
                     
Alan G Isac          for the comprehensive BibT() function for entering bibtex
                     entries.
                     
                     
Gontran Baerts       for libList.vim
                     
                     
Peter Heslin         useful discussion and also a lot of bug fixes. the
                     %%fakesection in folding.vim.
                     
                     

A large number of functions in latex-suite come from various other people. Some
of those people might have been missed here. Each function should however have
the author's name/e-mail above it. Thats the more authoritative place to check
out who has done what.

                                                        *latex-suite-maintainer*
The current maintainer(s) of latex-suite is(are)


Srinath Avadhanula <srinath@fastmail.fm>

Mikolaj Machowski <mikmach@wp.pl>

Benji Fisher <benji@member.AMS.org>

================================================================================
Vim folding

The following modelines should nicely fold up the help manual.

vim:ft=help:fdm=expr
vim:foldexpr=getline(v\:lnum-1)=~"=\\\\{80,}"?"a1"\:(getline(v\:lnum+1)=~"=\\\\{80,}"?"s1"\:"=")
vim:foldtext=v\:folddashes.substitute(getline(v\:foldstart),"\\\\s*\\\\*.*","","")
================================================================================

