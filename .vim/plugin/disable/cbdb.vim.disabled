" cbdb: code browser data base manager
" Vim script to easily manage multiple source trees
" Usage, inside your vimrc or gvimrc file, define g:cbdb_src_roots to be a list
" of source directories within which there is code database file, tags and/or
" cscope.out. This script exports 3 commands: Cadd, Cremove, and Cshow. The
" first two are interactive and very easy to use.
" ChangeLog:
" Thu Jul 10        Added Reset() command
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"if exists("cbdb_loaded")
"    finish
"endif
if !has('cscope')
    finish
endif

if !exists("$BR_INT")
	echo "BR_INT not defined"
	finish
endif

"TODO: Move these into .vimrc or somewhere
let br_int = expand("$BR_INT")
let g:linux_src_roots=[]
"let g:linux_src_roots=['/local2/wenzhil/picasso/branches/integration/APPLICATION_ENGINES/']
" call add(g:linux_src_roots, '/local2/wenzhil/picasso/branches/integration/DARWIN_APPLICATIONS/')
call add(g:linux_src_roots, br_int . '/DARWIN_PLATFORM/')
call add(g:linux_src_roots, br_int . '/CMS_MEDIA_SERVICES/')
call add(g:linux_src_roots, br_int . '/CMS_INFORMATION_SERVICES/')
call add(g:linux_src_roots, br_int . '/CMS_SECURITY_SERVICES/')
call add(g:linux_src_roots, br_int . '/CMS_SYSTEM_INFRASTRUCTURE/')
call add(g:linux_src_roots, br_int . '/CMS_SYSTEM_RESOURCE/')
call add(g:linux_src_roots, br_int . '/CMS_PLATFORM_SERVICES/')
call add(g:linux_src_roots, br_int . '/THIRD_PARTY_LIBRARIES/BSKYB_JTH/build/applications/Picasso')
" call add(g:linux_src_roots, '/local2/wenzhil/picasso/branches/integration/VGV')

let cbdb_loaded=1

if !exists("g:cbdb_src_roots")
    " TODO: configure for win32. Probably not needed for orion
	let g:cbdb_src_roots = g:linux_src_roots
endif
if !exists("g:cbdb_autoload")
	let g:cbdb_autoload=1
endif

let s:cbdb_dict = {}
let s:cbdb_buffer_name = '__cbdb_buf__'

function! <SID>AddDB(d)
    " echo "AddDB() " . a:d
    if isdirectory( a:d )
        let cwd=getcwd()
        exec 'cd ' . a:d
        if filereadable( 'tags' )
            exec 'set tags+=' . a:d . '/tags'
        endif
        if filereadable( 'cscope.out' )
            exec 'cs add ' . a:d . '/cscope.out ' a:d
        endif
        exec 'cd ' . cwd
        let s:cbdb_dict[a:d] = 1
    else
        echo a:d . " is not a directory"
    endif
endfunc

function! <SID>RemoveDB(d)
    if isdirectory( a:d )
        let cwd=getcwd()
        exec 'cd ' . a:d
        if filereadable( 'tags' )
            exec 'set tags-=' . a:d . '/tags'
        endif
        exec 'cs kill ' . a:d 
        exec 'cd ' . cwd
        let s:cbdb_dict[a:d] = 0
    else
        echo a:d . " is not a directory"
    endif
endfunc

function! <SID>Reset()
    for l in g:cbdb_src_roots
        call <SID>RemoveDB(l)
        call <SID>AddDB(l)
    endfor
    let bufnum = bufnr(s:cbdb_buffer_name)
    if bufnum != -1
        exec 'bwipe ' . bufnum
    endif
endfunc

function! <SID>InitDict()
    for l in g:cbdb_src_roots
        let s:cbdb_dict[l] = 0
    endfor
endfunc

function! <SID>ToggleLocation()
    let l = getline('.')
    let on  = stridx( l, '[+]')
    setlocal modifiable
    if on >= 0
        let actual_loc=substitute( l, '\[+\]    ', '', '' )
        call <SID>RemoveDB( actual_loc ) 
        :.s,+,-,g
    else "Assuming it is off
        let actual_loc=substitute( l, '\[-\]    ', '', '' )
        call <SID>AddDB( actual_loc ) 
        :.s,-,+,g
    endif
    setlocal nomodifiable
    normal j
    "echo 'toggling ' . actual_loc
endfunc

function! <SID>CreateBuffer()
    "echo "CreateBuffer...."
    let winnum = bufwinnr(s:cbdb_buffer_name)
    if winnum != -1
        exe winnum . 'wincmd w'
        return
    endif

    let bufnum = bufnr(s:cbdb_buffer_name)
    if bufnum != -1 "buffer already exists No space below!!!!
        exec ':8split +buffer' . bufnum 
        return
    endif

    exec "silent 8split " . s:cbdb_buffer_name
    let i = 1
    normal gg
    for l in g:cbdb_src_roots
        let tmp = s:cbdb_dict[l]
        let on_off = tmp ? '[+]    ' : '[-]    '
        call setline(i, on_off . l )
        let i+=1
    endfor
    setlocal nomodifiable
    setlocal buftype=nofile
    setlocal nowrap
    setlocal textwidth=999
    nnoremap <buffer> <silent> <CR> :call <SID>ToggleLocation()<CR>
    nnoremap <buffer> <silent> q :close<CR>
endfunc

"""""""""""""""""""""""""""""""""
" MAIN
"""""""""""""""""""""""""""""""""
call <SID>InitDict()

if g:cbdb_autoload
	for l in g:cbdb_src_roots
		call <SID>AddDB(l)
	endfor
endif

if !exists(":Cshow")
    command! -nargs=0 Cshow :call <SID>CreateBuffer()
    command! -nargs=0 Creset :call <SID>Reset()
endif
