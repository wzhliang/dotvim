" svndiff.vim
" Vim script for managing outstanding changesets in a local sandbox
"
" Usage:
" 'SvnDiff <sandbox_directory>' on the command line will create a new buffer
" which list the currnet status of the sandbox. In the buffer, the following
" mapping are available:
" r    Revert a single file or, in visual mode, multiple files.
" c    Commit a single file or, in visual mode, multiple files.
" d    Diff the file specified in the current line.
" v    Resolved a single file.
" e    Open the file in question in a new tab
" q    Quit
"
" BUG:
" - Diff doesn't work if the line is 'M   * <rev> <filename>
" - Revert doesn't work for 'M  .' line
" - Revert doesn't work for 'A + XXX' line
" - Doesn't work when file name has space in it.
" - Update doesn't work with line that starts with 'C'
" - Mass commit seems to be broken
"
" TODO: 
" - Add U for Updating all lines
" - Add functionality to add stuff to repo
" - Add sandbox directory to line 1
" - Add command to hide all files that needs update.
" - Add mapping to do tagging: selection of uncontinouse files
"
" ChangLog:
" Wed Sep 24  Changed implementation of GetFileName() so that it blindly looks for string[21:]
" Wed Sep 10  Added <C-R> for refreshing the buffer
" Wed Aug 20  Added support for 'A'. Added Edit command
" Sat Jul 19  Fully working version.
" Thu Jul 17  Removing reverted or commited line works.
" Tue Jul 15  First working version without range support and hardcoded
"             startup directory.
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"if exists("svndiff_loaded")
"    finish
"endif


let svndiff_loaded=1
let s:svndiff_buffer_name = '__svndiff_buf__'
let s:root_dir=""
let s:selected_files=[]

"Check requirment, doesn't return
if !executable('tkdiff')
    echoerr "Dependency error: missing tkdiff."
    finish
endif

if !executable('svn')
    echoerr "Dependency error: missing svn."
    finish
endif

if version < 700
    echoerr "Dependency error: Vim version older than 7.0."
    finish
endif

"Tag (select) a file for command over multiple files
function! <SID>TagLine()
    exe 'lcd ' . s:root_dir
    let l = getline('.')
    let fn = <SID>GetFileName(l)
    call add(s:selected_files, fn)
    setlocal modifiable
    exec "normal  A (+)"
    setlocal nomodifiable
endfunc

"Reset Selection
function! <SID>UnselectAll()
    let s:selected_files=[]

    setlocal modifiable
    %s, (+),,g
    setlocal nomodifiable
endfunc

"Get a file name from a line, returns 'XXX' when the line isn't a svn log
function! <SID>GetFileName(l)
    exe 'lcd ' . s:root_dir
    let r = substitute( a:l, '^.\{20}','','g')
    if filereadable(r) || isdirectory(r)
        return r
    else
        return "XXX"
    endif
endfunc


"Run svn command on a single file or a list of files
function! <SID>__ExeSvnCommand(cmd, list)
    exe 'lcd ' . s:root_dir
    if type(a:list) == 3 "actually a list
        let cli = "svn " . a:cmd . ' ' . join(a:list, ' ')
    else "Assuming it is a string
        let cli = "svn " . a:cmd . ' ' . a:list
    endif
    silent exec '!' . cli
    echo cli
endfunc

"Run svn command on a single line
function! <SID>__ExeSvnCommandOnLine(cmd, line)
    exe 'lcd ' . s:root_dir
    20l
    silent exec cmd .  ' ' . "<C-R><C-f>
endfunc


"Remove the current line when it is not needed anymore, dd will not work because
"'d' is mapped to sth else.
function! <SID>__RemoveCurrentLine()
    setlocal modifiable
    normal 0DgJ
    setlocal nomodifiable
endfunc


"Do revert on the current log line
function! <SID>Revert()
    let l = getline('.')
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        let ans = input("Are you sure you want to revert changes made in " . fn . '? ') 
        if toupper(ans) == 'Y' 
            call <SID>__ExeSvnCommand( 'revert', fn )
            call <SID>__RemoveCurrentLine()
        endif
    endif
endfunc

"Revert on a range of lines...
function! <SID>RevertRange() range
    let ans = input("Are you sure you want to revert the hilighted files? ") 
    if toupper(ans) != 'Y' 
        return
    endif

    let f_list = []

    for i in range(a:firstline, a:lastline)
        call add(f_list, <SID>GetFileName(getline(i)))
    endfor
    call <SID>__ExeSvnCommand( 'revert ', f_list )
    "Silly I know
    exe "normal " . a:firstline . 'g'
    for i in range(a:firstline, a:lastline)
        call <SID>__RemoveCurrentLine()
    endfor
endfunc

"Commit on a range of lines
function! <SID>CommitRange() range
    let ans = input("Commit message, no quotation marks (leave blank to cancel): ") 
    if ans == ""
        echo "Operation canceled."
        return
    endif

    let f_list = []

    for i in range(a:firstline, a:lastline)
        call add(f_list, <SID>GetFileName(getline(i)))
    endfor
    call <SID>__ExeSvnCommand( 'commit -m ' . "'" . ans . "'", f_list )
    "Silly I know
    exe "normal " . a:firstline . 'g'
    for i in range(a:firstline, a:lastline)
        call <SID>__RemoveCurrentLine()
    endfor
endfunc

"Commit single file on current line
function! <SID>Commit()
    let l = getline('.')
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        let ans = input("Commit message, no quotation marks (leave blank to cancel): ") 
        if ans != ""
            call <SID>__ExeSvnCommand( 'commit -m ' . '"' . ans . '"', fn )
            call <SID>__RemoveCurrentLine()
        endif
    endif
endfunc

"Resolved single file
function! <SID>Resolved()
    let l = getline('.')
    if  l !~ '^C'
        return
    endif
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        call <SID>__ExeSvnCommand( 'resolved ',  fn )
        setlocal modifiable
        :.s/^C/M/g
        setlocal nomodifiable
    endif
endfunc

"Update a line
function! <SID>Update()
    let l = getline('.')
    if  l !~ '^.      \*'
        echo "Nothing to be done"
        return
    endif
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        call <SID>__ExeSvnCommand( "update --accept 'postpone'",  fn )
        setlocal modifiable
        :.s/^.      \*/U       /g
        setlocal nomodifiable
    endif
endfunc

"Diff single file on current line
function! <SID>Diff()
    "echo "Entering " . s:root_dir
    exe 'lcd ' . s:root_dir
    let l = getline('.')
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        silent exe '!tkdiff ' . fn . '&'
    endif
endfunc

"We don't support diffing multiple files.... yet
function! <SID>ErrDiffRange() range
    echoerr "Diff operation is not available on range" 
endfunc

function! <SID>Edit()
    exe 'lcd ' . s:root_dir
    let l = getline('.')
    let fn = <SID>GetFileName(l)
    if fn != "XXX"
        silent exe "tabe " . fn
    endif
endfunc

function! <SID>PrintHelp()
    "Should only be called within CreateBuffer()
    setlocal modifiable
    normal Go
    call setline('.', " ---------- H E L P -----------" )
    normal o
    call setline('.', " r    Revert a single file or, in visual mode, multiple files." )
    normal o
    call setline('.', " c    Commit a single file or, in visual mode, multiple files.")
    normal o
    call setline('.', " d    Diff the file specified in the current line.")
    normal o
    call setline('.', " v    Resolved a single file.")
    normal o
    call setline('.', " e    Open the file in question in a new tab")
    normal o
    call setline('.', " C-R  Refresh the buffer.")
    normal o
    call setline('.', " q    Quit")
    setlocal nomodifiable
endfunc

 
function! <SID>UpdateBuffer(first)
    if !a:first
        echo "Refreshing svn result....."
    endif
    exe "lcd  " . s:root_dir
    mapclear <buffer>
    setlocal modifiable
    normal ggdG
    :r!svn status . --quiet --show-updates --non-interactive
    setlocal nomodifiable
    normal gg
    call <SID>__RemoveCurrentLine()
    call <SID>PrintHelp()
    normal gg
    call <SID>__SetupMapping()
endfunc

function! <SID>__SetupMapping()
    nnoremap <buffer> <silent> r :call <SID>Revert()<CR>
    vnoremap <buffer> <silent> r :call <SID>RevertRange()<CR>
    nnoremap <buffer> <silent> d :call <SID>Diff()<CR>
    vnoremap <buffer> <silent> d :call <SID>ErrDiffRange()<CR>
    nnoremap <buffer> <silent> c :call <SID>Commit()<CR>
    vnoremap <buffer> <silent> c :call <SID>CommitRange()<CR>
    nnoremap <buffer> <silent> t :call <SID>TagLine()<CR>
    nnoremap <buffer> <silent> u :call <SID>Update()<CR>
    nnoremap <buffer> <silent> v :call <SID>Resolved()<CR>
    nnoremap <buffer> <silent> e :call <SID>Edit()<CR>
    nnoremap <buffer> <silent> <C-R> :call <SID>UpdateBuffer(0)<CR>
    nnoremap <buffer> <silent> <C-D> :call <SID>UnselectAll()<CR>
    nnoremap <buffer> <silent> q :bwipeout!<CR>
endfunc

"Initialise the buffer and set mapping
function! <SID>CreateBuffer(p)
    echo "Getting list of changes for " . a:p . "..."
    let s:root_dir = a:p
    exec "silent 18split " . s:svndiff_buffer_name
    "exe "lcd  " . a:p
    " TODO: The following command should be an more elegant solution than
    " entering directory each time a function is called. However, it doesn't
    " work....
    "exec "au BufEnter <buffer> lcd " . s:root_dir

    setlocal buftype=nofile
    syn clear
    syn match SvnDiffConflict "^C"
    hi link SvnDiffModified Visual
    hi link SvnDiffConflict Error
    call <SID>UpdateBuffer(1)
endfunc

"""""""""""""""""""""""""""""""""
" MAIN
"""""""""""""""""""""""""""""""""
if !exists(":SvnDiff")
    command! -nargs=1 -complete=dir SvnDiff call <SID>CreateBuffer(<q-args>)
endif

" EoF vim:ts=4:sw=4:et:
